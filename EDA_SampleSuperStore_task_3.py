# -*- coding: utf-8 -*-
"""Task_3ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15_OyU633gGpFNHHCL9ib0EdDjNHA_W9y
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
stored_df = pd.read_csv('SampleSuperstore.csv')

# Drop unnecessary columns
stored_df = stored_df.drop(['Postal Code'], axis=1)

# Display basic information about the dataset
print("Dataset Info:")
print(stored_df.info())

# Display descriptive statistics
print("\nDescriptive Statistics:")
print(stored_df.describe())

# Check for duplicated rows
print("\nNumber of duplicated rows:", stored_df.duplicated().sum())

# Remove duplicated rows
stored_df.drop_duplicates(inplace=True)

# Display the first few rows of the dataset
print("\nFirst few rows of the dataset:")
print(stored_df.head())

# Check unique values in 'Category' and 'Sub-Category' columns
print("\nUnique categories in 'Category' column:")
print(stored_df['Category'].unique())
print("\nUnique sub-categories in 'Sub-Category' column:")
print(stored_df['Sub-Category'].unique())

# Bar plot to visualize the distribution of 'Category'
plt.figure(figsize=(8, 6))
sns.countplot(data=stored_df, x='Category')
plt.title('Distribution of Categories')
plt.xlabel('Category')
plt.ylabel('Count')
plt.show()

# Visualize the distribution of 'Sub-Category' using a count plot
plt.figure(figsize=(12, 6))
sns.countplot(data=stored_df, x='Sub-Category', order=stored_df['Sub-Category'].value_counts().index)
plt.title('Distribution of Sub-Categories')
plt.xlabel('Sub-Category')
plt.ylabel('Count')
plt.xticks(rotation=45, ha='right')
plt.show()

# Pairplot to visualize relationships between numeric variables
sns.pairplot(stored_df, hue='Category')
plt.title('Pairplot of Numeric Variables')
plt.show()

# Pie chart to visualize the distribution of 'Category'
plt.figure(figsize=(8, 6))
stored_df['Category'].value_counts().plot(kind='pie', autopct='%1.1f%%', explode=(0.05, 0.05, 0.05))
plt.title('Distribution of Categories')
plt.axis('equal')
plt.show()

#plotting the overall profit and ovreall sales of different categories
grouped_data = stored_df.groupby('Category')[['Sales', 'Profit']].sum()

grouped_data.plot(kind='bar', figsize=(10, 6))
plt.title('Overall Sales and Profit by Category')
plt.xlabel('Category')
plt.ylabel('Amount')
plt.xticks(rotation=45)
plt.legend(['Sales', 'Profit'])
plt.show()

#calculating the tio selling category of items
transform_s = stored_df.groupby('Category')['Sales'].sum()
#calculating the top profit making category of items
transform_p = stored_df.groupby('Category')['Profit'].sum()

#visulaization of code
transform_s.plot(kind='bar', fontsize=12)
transform_p.plot(kind='bar', fontsize=12, color='red')
plt.show()

#calaculating profit and sales for States
transform_s = stored_df.groupby('State')['Sales'].sum()
transform_p = stored_df.groupby('State')['Profit'].sum()

#visualization of data
plt.subplots(figsize=(20, 5))
transform_s.plot(kind='bar', fontsize=12)
transform_p.plot(kind='bar', fontsize=12, color='orange')
plt.show()

#calculating the sales and profit in sub-category
transform_s = stored_df.groupby('Sub-Category')['Sales'].sum()
transform_p = stored_df.groupby('Sub-Category')['Profit'].sum()

plt.subplots(figsize=(15, 6))
transform_s.plot(kind='bar', fontsize=10)
transform_p.plot(kind='bar', fontsize=10, color='orange')
plt.show()

# Define the variable transform_p
transform_p = stored_df.groupby('Sub-Category')['Profit'].sum()

# Plot the profit made in product sub-category horizontally
plt.subplots(figsize=(15, 6))
transform_p.plot(kind='barh', fontsize=10, color='red')
plt.show()

plt.subplot()
sns.lineplot(x=stored_df['Discount'],y=stored_df['Profit'])

stored_df.groupby('Region').sum()['Profit'].plot(kind='pie', autopct='%1.01f%%', explode=(0.025, 0.025, 0.025, 0.025))
plt.show()

#scatter plot on interdependency of sales and progft with respect to discount
stored_df.plot(kind='scatter',figsize=(10,6),x='Sales',y='Profit',c='Discount',cmap='viridis')
