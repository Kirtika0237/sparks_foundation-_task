# -*- coding: utf-8 -*-
"""TASK_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JKQ2I9vrH9q4l43_w7emYWI9tMbQos0H

The Spark Foundation Task 1
Predication using Superwised *ML*

predict the percentage of students based on their study hours
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""reading the data"""

url= "http://bit.ly/w-data"
data=pd.read_csv(url)
print("Data imported successfully")
#dimension i.e;(25,2) 25 rows and 2 column data
print(data.shape)
data.head()

"""describe  the data

"""

data.describe()

data.info()

plt.scatter(x='Hours', y='Scores',data=data)
plt.title('Hours vs Percentage')
plt.xlabel('Hours Studied')
plt.ylabel('Percentage Score')
plt.show()

"""There is a positive linear relation between the hours and percentages."""

data.corr()

#distplot defines the distribution of attributes
sns.distplot(x=data['Hours'])

sns.distplot(x=data['Scores'])

"""Using Linear regression so that we can divide the data into train and test dataset"""

x=data.iloc[:,:-1].values
y=data.iloc[:,1].values

"""Spliting test data into 20% and train data into 80%"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression
reg=LinearRegression()
reg.fit(x_train,y_train)

"""This calculates the training and testing accuracy."""

tr_acc=regressor.score(x_train, y_train)
ts_acc=regressor.score(x_test,y_test)
tr_acc,ts_acc

m=reg.coef_
c=reg.intercept_
line=m*x+c
plt.scatter(x,y)
plt.plot(x,line)
plt.show()

y_pred=reg.predict(x_test)

"""Comparing actual and predict data"""

df=pd.DataFrame({'Actual':y_test,"Predicted":y_pred})
df

"""Model evaluation"""

from sklearn import metrics
from sklearn.metrics import r2_score
print('Mean Absolute Error:',metrics.mean_absolute_error(y_test,y_pred))# defines avarage absoluate differnce between the predicted value and actual value
print('R2 Score:',r2_score(y_test,y_pred))#it defines how well the prediction of actual data is done

hours=float(input('Enter the numbers of hours:'))
own_pred=reg.predict([[hours]])
print("No of Hours = {}".format(hours))
print("Score={}".format(round(own_pred[0],3)))